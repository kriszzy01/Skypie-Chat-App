{"version":3,"sources":["static-data.js","reducer/index.js","reducer/user.js","reducer/contact.js","reducer/activeUserId.js","constants/action-types.js","reducer/messages.js","reducer/typing.js","store/index.js","components/User.js","action/index.js","components/Sidebar.js","components/Empty.js","components/Header.js","components/Chats.js","components/MessageInput.js","components/ChatWindow.js","components/Main.js","Container/App.js","index.js"],"names":["numberOfUsers","shortid","require","txtgen","faker","_","users","Array","from","length","generateUser","contacts","mapKeys","getMessages","messagesPerUser","messages","forEach","user","numberOfMsgs","user_id","v","i","number","text","sentence","is_user_msg","random","boolean","name","findName","email","internet","profile_pic","avatar","status","generate","combineReducers","state","contact","activeUserId","action","type","payload","message","allUserMsgs","Object","keys","typing","store","createStore","reducers","handleUserClick","dispatch","User","className","onClick","bind","src","alt","SideBar","map","key","Empty","first_name","split","Header","Chat","Chats","chatsRef","React","createRef","scrollToBottom","current","scrollTop","scrollHeight","this","ref","props","Component","MessageInput","value","getState","onSubmit","e","preventDefault","sendMessage","onChange","setTypingValue","target","placeholder","ChatWindow","activeUser","activeMsgs","values","Main","App","render","console","log","ReactDOM","document","getElementById","subscribe"],"mappings":"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","file":"static/js/main.38cee121.chunk.js","sourcesContent":["const shortid = require(\"shortid\"); // shortid.generate() returns a unique \"short\" id\r\nconst txtgen = require(\"txtgen\"); // txtgen.sentence() returns random \"readable\" sentences\r\nconst faker = require(\"faker\"); // faker is used for generating random fake data.\r\nconst _ = require(\"lodash\"); // lodash is a utility lib for Javascript\r\n\r\nconst users = generateUsers(10);\r\nexport const contacts = _.mapKeys(users, \"user_id\");\r\nexport const getMessages = messagesPerUser => {\r\n  let messages = {};\r\n  _.forEach(users, user => {\r\n    messages[user.user_id] = {\r\n      ..._.mapKeys(generateMsgs(messagesPerUser), \"number\")\r\n    };\r\n  });\r\n  return messages;\r\n};\r\n\r\n// just an example of how the state object is structured\r\nexport const state = {\r\n  user: generateUser(),\r\n  messages: getMessages(10),\r\n  typing: \"\",\r\n  contacts,\r\n  activeUserId: null\r\n};\r\n\r\n/**\r\n * @returns {Object} - a new user object\r\n */\r\nexport function generateUser() {\r\n  return {\r\n    name: faker.name.findName(),\r\n    email: faker.internet.email(),\r\n    profile_pic: faker.internet.avatar(),\r\n    status: txtgen.sentence(),\r\n    user_id: shortid.generate()\r\n  };\r\n}\r\n/**\r\n * @returns {Object} - a new message object\r\n */\r\nfunction generateMsg(number) {\r\n  return {\r\n    number,\r\n    text: txtgen.sentence(),\r\n    is_user_msg: faker.random.boolean()\r\n  };\r\n}\r\n/**\r\n *\r\n * @param {Number} numberOfUsers - the number of users to be generated\r\n * @param {Function} generateUser - function that generates a single user\r\n * @returns {Array} - an array of user objects with length n = numberOfUsers\r\n */\r\nfunction generateUsers(numberOfUsers) {\r\n  return Array.from({ length: numberOfUsers }, () => generateUser());\r\n}\r\n\r\nfunction generateMsgs(numberOfMsgs) {\r\n  return Array.from({ length: numberOfMsgs }, (v, i) => generateMsg(i));\r\n}","import user from \"./user\";\r\nimport contact from \"./contact\";\r\nimport activeUserId from \"./activeUserId\";\r\nimport messages from \"./messages\";\r\nimport typing from \"./typing\";\r\nimport {combineReducers} from \"redux\";\r\n\r\nexport default combineReducers({\r\n    user, \r\n    contact,\r\n    activeUserId,\r\n    messages,\r\n    typing\r\n})","import { generateUser } from \"../static-data\";\r\n\r\nexport default function user(state = generateUser(), action) {\r\n    return state;\r\n}","import {contacts} from \"../static-data\";\r\n\r\nexport default (state = {contacts}, action) => {\r\n    return state;\r\n};","import { SET_ACTIVE_USER_ID } from \"../constants/action-types\";\r\n\r\nexport default function activeUserId(state = null, action) {\r\n    switch (action.type) {\r\n        case SET_ACTIVE_USER_ID:\r\n            return action.payload;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","export const SET_ACTIVE_USER_ID = \"SET_ACTIVE_USER_ID\";\r\nexport const SET_TYPING_VALUE = \"SET_TYPING_VALUE\";\r\nexport const SEND_MESSAGE = \"SET_MESSAGE\";","import { getMessages } from \"../static-data\";\r\nimport { SEND_MESSAGE } from \"../constants/action-types\";\r\n\r\nexport default function messages(state = getMessages(10), action) {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE:\r\n            const { message, activeUserId } = action.payload;\r\n\r\n            const allUserMsgs = state[activeUserId];\r\n\r\n            const number = Object.keys(allUserMsgs).length + 1;\r\n\r\n            return {\r\n                ...state,\r\n                [activeUserId]: {\r\n                    ...allUserMsgs,\r\n                    [number]: {\r\n                        number,\r\n                        text: message,\r\n                        is_user_msg: true\r\n                    }\r\n                }\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import { SET_TYPING_VALUE, SEND_MESSAGE } from \"../constants/action-types\";\r\n\r\nexport default function typing(state = \"\", action) {\r\n    switch (action.type) {\r\n        case SET_TYPING_VALUE:\r\n            return action.payload;\r\n        \r\n        case SEND_MESSAGE: \r\n            return \"\";\r\n            \r\n        default:\r\n            return state;\r\n    }\r\n}","import {createStore} from \"redux\";\r\nimport reducers from \"../reducer\";\r\n\r\nconst store = createStore(reducers);\r\n\r\nexport default store;","import React from \"react\";\r\nimport store from \"../store/index\";\r\nimport \"./User.css\";\r\nimport { setActiveUserId } from \"../action\";\r\n\r\nconst User = ({ user }) => {\r\n  const { name, profile_pic, status } = user;\r\n\r\n  return (\r\n    <div className=\"User\" onClick={handleUserClick.bind(null, user)}>\r\n      <img src={profile_pic} alt={name} className=\"User__pic\" />\r\n      <div className=\"User__details\">\r\n        <p className=\"User__details-name\">{name}</p>\r\n        <p className=\"User__details-status\">{status}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nfunction handleUserClick({user_id}) {\r\n  store.dispatch(setActiveUserId(user_id));\r\n}\r\n\r\nexport default User;","import { SET_ACTIVE_USER_ID, SET_TYPING_VALUE, SEND_MESSAGE } from \"../constants/action-types\";\r\n\r\nexport const setActiveUserId = id => ({\r\n    type: SET_ACTIVE_USER_ID,\r\n    payload: id\r\n});\r\n\r\nexport const setTypingValue = value => ({\r\n    type: SET_TYPING_VALUE,\r\n    payload: value\r\n})\r\n\r\nexport const sendMessage = (message, activeUserId) => ({\r\n    type: SEND_MESSAGE,\r\n    payload: {\r\n        message, \r\n        activeUserId\r\n    }\r\n})","import React from \"react\";\r\nimport User from \"./User\";\r\nimport \"./SideBar.css\";\r\n\r\nconst SideBar = ({contacts}) => {\r\n    return(\r\n        <aside className=\"Sidebar\">\r\n            {contacts.map(contact => \r\n                <User user={contact} key={contact.user_id}/>)}\r\n        </aside>\r\n    );\r\n};\r\n\r\nexport default SideBar;","import React from \"react\";\r\nimport \"./Empty.css\";\r\n\r\nconst Empty = ({ user }) => {\r\n    const { name, profile_pic, status } = user;\r\n    const first_name = name.split(\" \")[0];\r\n    return (\r\n        <div className=\"Empty\">\r\n            <h1 className=\"Empty__name\">Welcome, {first_name} </h1>\r\n            <img src={profile_pic} alt={name} className=\"Empty__img\" />\r\n            <p className=\"Empty__status\">\r\n                <b>Status:</b> {status}\r\n            </p>\r\n            <button className=\"Empty__btn\">Start a conversation</button>\r\n            <p className=\"Empty__info\">\r\n                Search for someone to start chatting with or go to Contacts to see who\r\n                is available\r\n            </p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Empty;","import React from \"react\";\r\nimport \"./Header.css\";\r\nfunction Header({ user }) {\r\n    const { name, status } = user;\r\n    return (\r\n        <header className=\"Header\">\r\n            <h1 className=\"Header__name\">{name}</h1>\r\n            <p className=\"Header__status\">{status}</p>\r\n        </header>\r\n    );\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\";\r\nimport \"./Chats.css\";\r\n\r\nconst Chat = ({ message }) => {\r\n  const { text, is_user_msg } = message;\r\n  return (\r\n    <span className={`Chat ${is_user_msg ? \"is-user-msg\" : \"\"}`}>{text}</span>\r\n  );\r\n};\r\n\r\nclass Chats extends Component {\r\n  chatsRef = React.createRef();\r\n\r\n  componentDidMount() {\r\n    this.scrollToBottom();\r\n  }\r\n  componentDidUpdate() {\r\n    this.scrollToBottom();\r\n  }\r\n\r\n  scrollToBottom = () => {\r\n    this.chatsRef.current.scrollTop = this.chatsRef.current.scrollHeight;\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Chats\" ref={this.chatsRef}>\r\n        {this.props.messages.map(message => (\r\n          <Chat message={message} key={message.number} />\r\n          ))}\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n  \r\n  export default Chats;","import React from \"react\";\r\nimport store from \"../store\";\r\nimport { setTypingValue, sendMessage } from \"../action\";\r\nimport \"./MessageInput.css\";\r\n\r\nconst MessageInput = ({ value }) => {\r\n    const handleChange = e => {\r\n        store.dispatch(setTypingValue(e.target.value));\r\n    };\r\n\r\n    const state = store.getState();\r\n\r\n    const handleSubmit = e => {\r\n        e.preventDefault();\r\n        const {typing, activeUserId} = state;\r\n        \r\n        store.dispatch(sendMessage(typing, activeUserId));\r\n    }\r\n\r\n    return (\r\n        <form className=\"Message\" onSubmit={handleSubmit}>\r\n            <input\r\n                className=\"Message__input\"\r\n                onChange={handleChange}\r\n                value={value}\r\n                placeholder=\"write a message\"\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default MessageInput;","import React from \"react\";\r\nimport store from \"../store\";\r\nimport Header from \"../components/Header\";\r\nimport Chats from \"../components/Chats\";\r\nimport MessageInput from \"../components/MessageInput\";\r\nimport \"./ChatWindow.css\";\r\nimport _ from \"lodash\";\r\n\r\nconst ChatWindow = ({ activeUserId }) => {\r\n  const state = store.getState();\r\n  const activeUser = state.contact.contacts[activeUserId];\r\n  const activeMsgs = state.messages[activeUserId];\r\n\r\n  const { typing } = state;\r\n\r\n  return (\r\n    <div className=\"ChatWindow\">\r\n      <Header user={activeUser} />\r\n      <Chats messages={_.values(activeMsgs)} />\r\n      <MessageInput value={typing} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatWindow;","import React from \"react\";\r\nimport \"./Main.css\";\r\nimport Empty from \"../components/Empty\";\r\nimport ChatWindow from \"../components/ChatWindow\";\r\n\r\nconst Main = ({user, activeUserId}) => {\r\n  const renderMainContent = () => {\r\n    if (!activeUserId) {\r\n      return <Empty user = {user} activeUserId = {activeUserId}/>\r\n    } \r\n    return <ChatWindow user = {user} activeUserId = {activeUserId}/>\r\n  }\r\n\r\n  return <main className=\"Main\">{renderMainContent()}</main>;\r\n};\r\n\r\nexport default Main;","import React, {Component} from 'react';\nimport \"./App.css\";\nimport SideBar from \"../components/Sidebar\";\nimport Main from \"../components/Main\";\nimport store from \"../store\";\nimport  _ from \"lodash\";\n\nclass App extends Component {\n  render() {\n    const {contact, user, activeUserId} = store.getState();\n    \n    return(\n      <div className=\"App\">\n        <SideBar contacts = {_.values(contact.contacts)}/>\n        <Main user = {user} activeUserId = {activeUserId}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./Container/App\";\nimport store from \"./store\";\n\n\nconst render = () => {\n  fancyLog();\n  return ReactDOM.render(<App />, document.getElementById(\"root\"));\n};\n\nrender();\nstore.subscribe(render);\n\nfunction fancyLog() {\n  console.log(\"%c Rendered with 👉 👉👇\", \"background: purple; color: #FFF\");\n  console.log(store.getState());\n}"],"sourceRoot":""}